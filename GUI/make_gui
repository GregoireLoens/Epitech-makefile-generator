#!  /usr/bin/env python3

import time
import os
from tkinter import *


def print_header(makefile, login, project):
    now = time.localtime(time.time())
    makefile.write("##\n")
    makefile.write("## Makefile for ")
    makefile.write(project.get())
    makefile.write(" in ")
    makefile.write(sys.path[0])
    makefile.write("\n")
    makefile.write("## \n")
    makefile.write("## Made by ")
    makefile.write(login.get())
    makefile.write("\n")
    makefile.write("## login   <")
    makefile.write(login.get())
    makefile.write("@epitech.net>\n")
    makefile.write("## \n")
    makefile.write("## Started on ")
    makefile.write(time.asctime(now))
    makefile.write(" ")
    makefile.write(login.get())
    makefile.write("\n")
    makefile.write("## Last update ")
    makefile.write(time.asctime(now))
    makefile.write(" ")
    makefile.write(login.get())
    makefile.write("\n")
    makefile.write("##\n\n")


def make_my_file(header, lapin, compilo, flag, login, project):
    try:
        os.remove("Makefile")
    except OSError:
        pass
    makefile = open("Makefile", "x")
    if header.get() == 1:
        print_header(makefile, login, project)
    makefile.write("CC\t=\t" + compilo.get())
    makefile.write("\n\n")
    makefile.write("NAME\t=\t" + project.get())
    makefile.write("\n\n")
    if lapin.get() == 1:
        lapin = ["-L/home/${USER}/.froot/include", "-llapin", "-lsfml-audio", "-lsfml-graphics", "-lsfml_window",
                 "-lsfml-system", "-lstdc++", "-ldl", "-lm"]
        makefile.write("LAPIN\t=\t-L/home/${USER}/.froot/lib\n")
        for car in lapin:
            makefile.write("LAPIN\t+=\t")
            makefile.write(car)
            makefile.write("\n")
        makefile.write("\n")
    makefile.write("CFLAGS\t=\t" + flag.get())
    makefile.write("\n\n")
    makefile.write("SRCS\t=\t\n\n")
    makefile.write("OBJS\t=\t$(SRCS:.c=.o)\n\n")
    makefile.write("RM\t=\trm -f\n\n")
    makefile.write("all: $(NAME)\n\n")
    makefile.write("$(NAME): $(OBJS)\n")
    makefile.write("\t$(CC) $(OBJS) -o $(NAME) $(CFLAGS)\n\n")
    makefile.write("clean:\n")
    makefile.write("\t$(RM) $(OBJS)\n\n")
    makefile.write("fclean: clean\n")
    makefile.write("\t$(RM) $(NAME)\n\n")
    makefile.write("re: fclean all\n\n")
    makefile.write(".phony: re fclean clean all")
    end = Tk()
    end.title("Done")
    quit_in = Label(end, text="Your Makefile is ready !")
    quit_in.pack()
    ok_end = Button(end, text="Ok", command=lambda: exit(666))
    ok_end.pack()
    end.mainloop()


def ask_makefile():
    window = Tk()
    window.title("Makefile Gen")
    header = IntVar()
    lapin = IntVar()
    login = StringVar()
    project = StringVar()
    compilo = StringVar()
    login.set("login")
    project.set("project name")
    compilo.set("compilo (ex: gcc, g++)")
    flag = StringVar()
    flag.set("What flags?")
    head = Checkbutton(window, text="Header?", variable=header)
    lpn = Checkbutton(window, text="Lib Lapin?", variable=lapin)
    compiler = Entry(window, textvariable=compilo)
    flg = Entry(window, textvariable=flag)
    log = Entry(window, textvariable=login)
    pro = Entry(window, textvariable=project)
    make = Button(window, text="Make!", command=lambda: make_my_file(header, lapin, compilo, flag, login, project))
    quite = Button(window, text="Quit", command=window.quit)
    head.pack()
    lpn.pack()
    log.pack()
    pro.pack()
    compiler.pack()
    flg.pack()
    make.pack()
    quite.pack()
    window.mainloop()

if __name__ == "__main__":
    ask_makefile()
